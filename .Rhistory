shiny::runApp('C:/Users/lisan/Dropbox/paper/ECI power app')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp()
runApp('R')
runApp('R')
runApp('R')
library(plyr)
seed = 646
ngenes = 1000
filter = TRUE
updateProgress = NULL
unbalanced = TRUE
alphaU = 0.05
control_data_sd1 = 1
control_data_sd2 = 1
case_data_sd1 = 1
case_data_sd2 = 1
meanC1 = 3
meanC2 = 3
meanDiff1 = 0.5
meanDiff2 = 1
sizeG = cbind(c(90,90),c(20,20))
# function
sim_expr <- function(ncon,ncase,ngenes, meanC, meanDiff, control_data_sd, case_data_sd){
case <- matrix(NA, ncol = ncase, nrow = ngenes)
control <- matrix(NA, ncol = ncon, nrow = ngenes)
for(i in 1:ngenes){
# n random variable from truncated normal distribution for control
control[i,] = truncnorm::rtruncnorm(ncon,a=0,b=Inf,mean = meanC, sd = control_data_sd)
# n random variable from truncated normal distribution for case
case[i,] = truncnorm::rtruncnorm(ncase,a=0,b=Inf, mean = meanC + meanDiff, sd = case_data_sd)
}
sample <- cbind(control,case)
colnames(sample) <- seq(1,(ncon+ncase),1)
rownames(sample) <- seq(1,ngenes,1)
return(sample)
}
# variables
if(unbalanced){
print("unbalanced")
} else {
print("balanced")
}
print(sizeG)
N <- 0
if(unbalanced){
N <- dim(sizeG)[1]
} else {
N <- length(sizeG)
}
g=1
# group information
ncon1 = ncase1 = ncon2 = ncase2 = 0
if(unbalanced){
ncon1 = ncase1 = sizeG[g,1]
ncon2 = ncase2 = sizeG[g,2]
} else {
ncon1 = ncase1 = ncon2 = ncase2 = sizeG[g]
}
ID1 <- seq(1,(ncon1+ncase1),1)
ID2 <- seq(1,(ncon2+ncase2),1)
Type1 <- c(rep("normal",ncon1),rep("tumor",ncase1))
Type2 <- c(rep("normal",ncon2),rep("tumor",ncase2))
targetsS1 <- data.frame(ID = ID1, Type = Type1)
targetsS2 <- data.frame(ID = ID2, Type = Type2)
ngenes = 2
plot_expr2 <- function(meanDiff1 = 1, meanDiff2 = 1){
sample1 <- sim_expr(ncon1,ncase1,ngenes, meanC1, meanDiff1, control_data_sd1, case_data_sd1)
sample2 <- sim_expr(ncon2,ncase2,ngenes, meanC2, meanDiff2, control_data_sd2, case_data_sd2)
n1 = sizeG[1,1] + 1
n2 = sizeG[1,2] + 1
df_sam <- data.frame(data = c(sample1[1,1:ncon1], sample2[1,1:ncon2], sample1[1,n1:(ncon1+ncase1)], sample2[1,n2:(ncon2+ncase2)]),
casecon = rep(c("control","case"), each = (ncon1+ncon2)),
study = rep(c(rep("study 1",ncon1), rep("study 2",ncon2)),2))
mu <- ddply(df_sam, c("casecon","study"), summarise, grp.mean=mean(data))
p <- ggplot(df_sam, aes(x=data, color=casecon)) +
geom_density() +facet_grid(study ~ .) + xlim(0,7) +
geom_vline(data=mu, aes(xintercept=grp.mean, color=casecon),linetype="dashed")
return(p)
}
###########
# differential Expression
diffExpr <- function(data, targets){
# getting pval
design <- model.matrix(~targets$Type)
colnames(design) <- levels(targets$Type)
fit <- lmFit(data, design)
fit <- eBayes(fit)
# getting sd
beta <- fit$coefficients[,2]
pval <- fit$p.value[,2]
sd <- ((sqrt(fit$s2.post)) * (fit$stdev.unscaled))[,2]
gene_list <- data.frame(log2FC = beta, pval = pval, sd = sd, df = fit$df.total)
return(gene_list)
}
ngenes = 1000
p1 <- plot_expr2(meanDiff1 = 0.5, meanDiff2 = 1)
p1
p2 <- plot_expr2(meanDiff1 = 1, meanDiff2 = 0.5)
p2
p3 <- plot_expr2(meanDiff1 = 1, meanDiff2 = 1)
p3
# function
sim_expr <- function(ncon,ncase,ngenes, meanC, meanDiff, control_data_sd, case_data_sd){
print(meanDiff)
case <- matrix(NA, ncol = ncase, nrow = ngenes)
control <- matrix(NA, ncol = ncon, nrow = ngenes)
for(i in 1:ngenes){
# n random variable from truncated normal distribution for control
control[i,] = truncnorm::rtruncnorm(ncon,a=0,b=Inf,mean = meanC, sd = control_data_sd)
# n random variable from truncated normal distribution for case
case[i,] = truncnorm::rtruncnorm(ncase,a=0,b=Inf, mean = meanC + meanDiff, sd = case_data_sd)
}
sample <- cbind(control,case)
colnames(sample) <- seq(1,(ncon+ncase),1)
rownames(sample) <- seq(1,ngenes,1)
return(sample)
}
plot_expr2 <- function(meanDiff1 = 1, meanDiff2 = 1){
sample1 <- sim_expr(ncon1,ncase1,ngenes, meanC1, meanDiff1, control_data_sd1, case_data_sd1)
sample2 <- sim_expr(ncon2,ncase2,ngenes, meanC2, meanDiff2, control_data_sd2, case_data_sd2)
n1 = sizeG[1,1] + 1
n2 = sizeG[1,2] + 1
df_sam <- data.frame(data = c(sample1[1,1:ncon1], sample2[1,1:ncon2], sample1[1,n1:(ncon1+ncase1)], sample2[1,n2:(ncon2+ncase2)]),
casecon = rep(c("control","case"), each = (ncon1+ncon2)),
study = rep(c(rep("study 1",ncon1), rep("study 2",ncon2)),2))
mu <- ddply(df_sam, c("casecon","study"), summarise, grp.mean=mean(data))
p <- ggplot(df_sam, aes(x=data, color=casecon)) +
geom_density() +facet_grid(study ~ .) + xlim(0,7) +
geom_vline(data=mu, aes(xintercept=grp.mean, color=casecon),linetype="dashed")
return(p)
}
p1 <- plot_expr2(meanDiff1 = 0.5, meanDiff2 = 1)
p2 <- plot_expr2(meanDiff1 = 1, meanDiff2 = 0.5)
p1
p2
p3
p1 <- plot_expr2(meanDiff1 = 0.5, meanDiff2 = 1)
p1
ngenes = 10
table_diffexp <- function(meanDiff1 = 1, meanDiff2 = 1){
sample1 <- sim_expr(ncon1,ncase1,ngenes, meanC1, meanDiff1, control_data_sd1, case_data_sd1)
sample2 <- sim_expr(ncon2,ncase2,ngenes, meanC2, meanDiff2, control_data_sd2, case_data_sd2)
gene_listS1 <- diffExpr(sample1,targetsS1)
gene_listS2 <- diffExpr(sample2,targetsS2)
print(gene_listS1)
print(gene_listS2)
}
table_diffexp(1,1)
table_diffexp(0.5,1)
sample1 <- sim_expr(ncon1,ncase1,ngenes, meanC1, meanDiff1, control_data_sd1, case_data_sd1)
sample2 <- sim_expr(ncon2,ncase2,ngenes, meanC2, meanDiff2, control_data_sd2, case_data_sd2)
gene_listS1 <- diffExpr(sample1,targetsS1)
gene_listS2 <- diffExpr(sample2,targetsS2)
ECEA::getECI(gene_listS1$log2FC, gene_listS2$log2FC, gene_listS1$pval, gene_listS2$pval)
gene_listS1$log2FC
beta1 = gene_listS1$log2FC
beta2 = gene_listS2$log2FC
pval1 = gene_listS1$pval
pval2 = gene_listS2$pval
names(beta1) = rownames(gene_listS1)
names(beta2) = rownames(gene_listS2)
names(pval1) = rownames(gene_listS1)
names(pval2) = rownames(gene_listS2)
#get eci for all genes
eci <- ECEA::getECI(beta1,beta2,pval1,pval2)
eci
table_diffexp <- function(meanDiff1 = 1, meanDiff2 = 1){
sample1 <- sim_expr(ncon1,ncase1,ngenes, meanC1, meanDiff1, control_data_sd1, case_data_sd1)
sample2 <- sim_expr(ncon2,ncase2,ngenes, meanC2, meanDiff2, control_data_sd2, case_data_sd2)
gene_listS1 <- diffExpr(sample1,targetsS1)
gene_listS2 <- diffExpr(sample2,targetsS2)
beta1 = gene_listS1$log2FC
beta2 = gene_listS2$log2FC
pval1 = gene_listS1$pval
pval2 = gene_listS2$pval
names(beta1) = rownames(gene_listS1)
names(beta2) = rownames(gene_listS2)
names(pval1) = rownames(gene_listS1)
names(pval2) = rownames(gene_listS2)
#get eci for all genes
eci <- ECEA::getECI(beta1,beta2,pval1,pval2)
print(gene_listS1)
print(gene_listS2)
print(eci)
}
table_diffexp(1,1)
table_diffexp(0.5,1)
table_diffexp <- function(meanDiff1 = 1, meanDiff2 = 1){
sample1 <- sim_expr(ncon1,ncase1,ngenes, meanC1, meanDiff1, control_data_sd1, case_data_sd1)
sample2 <- sim_expr(ncon2,ncase2,ngenes, meanC2, meanDiff2, control_data_sd2, case_data_sd2)
gene_listS1 <- diffExpr(sample1,targetsS1)
gene_listS2 <- diffExpr(sample2,targetsS2)
beta1 = gene_listS1$log2FC
beta2 = gene_listS2$log2FC
pval1 = gene_listS1$pval
pval2 = gene_listS2$pval
names(beta1) = rownames(gene_listS1)
names(beta2) = rownames(gene_listS2)
names(pval1) = rownames(gene_listS1)
names(pval2) = rownames(gene_listS2)
#get eci for all genes
eci <- ECEA::getECI(beta1,beta2,pval1,pval2)
S1vsS2 <- ECIbootstrapTest(gene_listS1, gene_listS2,
sample1,sample2,
targetsS1,targetsS2,
filter=filter, alphaU=alphaU)
print(gene_listS1)
print(gene_listS2)
print(eci)
print(S1vsS2)
}
table_diffexp(1,1)
###########
# differential Expression
diffExpr <- function(data, targets){
# getting pval
design <- model.matrix(~targets$Type)
colnames(design) <- levels(targets$Type)
fit <- lmFit(data, design)
fit <- eBayes(fit)
# getting sd
beta <- fit$coefficients[,2]
pval <- fit$p.value[,2]
sd <- ((sqrt(fit$s2.post)) * (fit$stdev.unscaled))[,2]
gene_list <- data.frame(log2FC = beta, pval = pval, sd = sd, df = fit$df.total)
return(gene_list)
}
###########
# ECI
bootstrap.pval <- function(data){
B = 1000
pE <- mean(data)
N = sum(data < pE)
M = sum(data < 0 )
alpha1 = pnorm(-2*qnorm(N/B) + qnorm(M/B))
if(pE < 0) alpha1 = 1 - alpha1
alpha = 2*alpha1
return(alpha)
}
# gene_list1 <- gene_listS1
# gene_list2 <- gene_listS2
# geneExpr1 <-  sample1
# geneExpr2 <-  sample2
# targets1 <- targetsS1
# targets2<- targetsS2
# filter = TRUE
# alphaU = 0.05
ECIbootstrapTest <- function(gene_list1,gene_list2, geneExpr1,geneExpr2,targets1,targets2, filter = TRUE, alphaU = 0.05){
#get beta values and pvalues from both studies
beta1 = gene_list1$log2FC
beta2 = gene_list2$log2FC
pval1 = gene_list1$pval
pval2 = gene_list2$pval
names(beta1) = rownames(gene_list1)
names(beta2) = rownames(gene_list2)
names(pval1) = rownames(gene_list1)
names(pval2) = rownames(gene_list2)
#get eci for all genes
eci <- getECI(beta1,beta2,pval1,pval2)
n <- 1000
len <- dim(gene_list1)[1]
num1 <- dim(targets1)[1]
num2 <- dim(targets2)[1]
group1 = which(targets1[,2] == "tumor")
group2 = which(targets1[,2] == "normal")
group3 = which(targets2[,2] == "tumor")
group4 = which(targets2[,2] == "normal")
#print(paste(length(group1),length(group2),length(group3),length(group4)))
bootstrap <- matrix(NA, ncol = n, nrow = len)
for(i in 1:n){
# if (i %% 10 == 0){
#  print(i)
# }
#Bootstrap sampling
geneExpr1new <- matrix(NA, ncol = num1, nrow = len)
geneExpr2new <- matrix(NA, ncol = num2, nrow = len)
for(j in 1:len){
new1 = c(sample(group1,length(group1),replace = TRUE),sample(group2,length(group2),replace = TRUE))
new2 = c(sample(group3,length(group3),replace = TRUE),sample(group4,length(group4),replace = TRUE))
geneExpr1new[j,] = geneExpr1[j,new1]
geneExpr2new[j,] = geneExpr2[j,new2]
}
#diff gene expression
gene_list_B1 = diffExpr(geneExpr1new,targets1)
gene_list_B2 = diffExpr(geneExpr2new,targets2)
#ECI
beta_B1 = gene_list_B1$log2FC
beta_B2 = gene_list_B2$log2FC
pval_B1 = gene_list_B1$pval
pval_B2 = gene_list_B2$pval
names(beta_B1) = rownames(gene_list_B1)
names(beta_B2) = rownames(gene_list_B2)
names(pval_B1) = rownames(gene_list_B1)
names(pval_B2) = rownames(gene_list_B2)
#get eci for all genes
bootstrap[,i] <- getECI(beta_B1,beta_B2,pval_B1,pval_B2)
}
#confidence intervals
CI <- matrix(NA,ncol = 2, nrow = len)
pval <- c()
for(i in 1:len){
#CI[i,] <- bca(bootstrap[i,], conf.level = 1 - alphaU)
pval[i] <- bootstrap.pval(bootstrap[i,])
}
result <- data.frame(ECI = eci, p_value = pval)
rownames(result) <- rownames(gene_list1)
# output only those ECI where at least one of the genes has abs(log2FC) > 1 and pval < 0.05
if(filter){
result <- result[(abs(gene_list1$log2FC) > 1 & gene_list1$pval < 0.05) | (abs(gene_list2$log2FC) > 1 & gene_list2$pval < 0.05),]
}
return(result)
}
table_diffexp(1,1)
table_diffexp(0.5,1)
shiny::runApp('R')
runApp('R')
