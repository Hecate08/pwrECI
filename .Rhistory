seed = 646
ngenes = 1000
sizeG = c(10,20)
filter = TRUE
updateProgress = NULL
unbalanced = FALSE
progressMonitor= NULL
# function
sim_expr <- function(ncon,ncase,ngenes, meanC, meanDiff, control_data_sd, case_data_sd){
case <- matrix(NA, ncol = ncase, nrow = ngenes)
control <- matrix(NA, ncol = ncon, nrow = ngenes)
for(i in 1:ngenes){
# n random variable from truncated normal distribution for control
control[i,] = truncnorm::rtruncnorm(ncon,a=0,b=Inf,mean = meanC, sd = control_data_sd)
# n random variable from truncated normal distribution for case
case[i,] = truncnorm::rtruncnorm(ncase,a=0,b=Inf, mean = meanC + meanDiff, sd = case_data_sd)
}
sample <- cbind(control,case)
colnames(sample) <- seq(1,(ncon+ncase),1)
rownames(sample) <- seq(1,ngenes,1)
return(sample)
}
# variables
if(unbalanced){
print("unbalanced")
} else {
print("balanced")
}
print(sizeG)
N <- 0
if(unbalanced){
N <- dim(sizeG)[1]
} else {
N <- length(sizeG)
}
if (is.function(updateProgress)) {
text <- paste0(0,"/",N)
updateProgress(detail = text)
}
# main part
time <- 0
Power <- c()
g=1
start_time <- Sys.time()
#############################
# parameters
set.seed(seed)
# group information
ncon1 = ncase1 = ncon2 = ncase2 = 0
if(unbalanced){
ncon1 = ncase1 = sizeG[g,1]
ncon2 = ncase2 = sizeG[g,2]
} else {
ncon1 = ncase1 = ncon2 = ncase2 = sizeG[g]
}
ID1 <- seq(1,(ncon1+ncase1),1)
ID2 <- seq(1,(ncon2+ncase2),1)
Type1 <- c(rep("normal",ncon1),rep("tumor",ncase1))
Type2 <- c(rep("normal",ncon2),rep("tumor",ncase2))
targetsS1 <- data.frame(ID = ID1, Type = Type1)
targetsS2 <- data.frame(ID = ID2, Type = Type2)
# simulate data
sample1 <- sim_expr(ncon1,ncase1,ngenes, meanC1, meanDiff1, control_data_sd1, case_data_sd1)
sample2 <- sim_expr(ncon2,ncase2,ngenes, meanC2, meanDiff2, control_data_sd2, case_data_sd2)
# ECI permutation tests
S1vsS2 <- ECIbootstrapTest(sample1,sample2,
targetsS1,targetsS2,
filter=filter)
source("ECI_functions_power.R", local = TRUE)
# ECI permutation tests
S1vsS2 <- ECIbootstrapTest(sample1,sample2,
targetsS1,targetsS2,
filter=filter)
Power[g] <- sum(S1vsS2$p_value < alphaU)/dim(S1vsS2)[1]
Power[1]
print(g)
end_time <- Sys.time()
if(g == 1) time <- end_time - start_time
time
round(time*N/60,2)
round(time*N,2)
geneExpr1 <-  sample1
geneExpr2 <-  sample2
targets1 <- targetsS1
targets2<- targetsS2
filter = TRUE
# differential gene expression
gene_list1 <- diffExpr(geneExpr1,targets1)
gene_list2 <- diffExpr(geneExpr2,targets2)
data = diffExpr1
data = geneExpr1
targets = targets1
# getting pval
design <- model.matrix(~targets$Type)
design
citation("shiny")
shiny::runApp('R')
shiny::runApp('R')
shiny::runApp('R')
runApp('R')
shiny::runApp('R')
runApp('R')
runApp()
alphaU = 0.05
control_data_sd1 = 1
control_data_sd2 = 1
case_data_sd1 = 1
case_data_sd2 = 1
meanC1 = 3
meanC2 = 3
meanDiff1 = 1
meanDiff2 = 1
seed = 646
ngenes = 100000
sizeG = c(10,20)
updateProgress = NULL
unbalanced = FALSE
progressMonitor= NULL
start_time <- Sys.time()
print("ECI power calculation starts")
# function
sim_expr <- function(ncon,ncase,ngenes, meanC, meanDiff, control_data_sd, case_data_sd){
case <- matrix(NA, ncol = ncase, nrow = ngenes)
control <- matrix(NA, ncol = ncon, nrow = ngenes)
for(i in 1:ngenes){
# n random variable from truncated normal distribution for control
control[i,] = truncnorm::rtruncnorm(ncon,a=0,b=Inf,mean = meanC, sd = control_data_sd)
# n random variable from truncated normal distribution for case
case[i,] = truncnorm::rtruncnorm(ncase,a=0,b=Inf, mean = meanC + meanDiff, sd = case_data_sd)
}
sample <- cbind(control,case)
colnames(sample) <- seq(1,(ncon+ncase),1)
rownames(sample) <- seq(1,ngenes,1)
return(sample)
}
#print("loaded function")
# variables
if(unbalanced){
print("unbalanced")
} else {
print("balanced")
}
print(sizeG)
N <- 0
if(unbalanced){
N <- dim(sizeG)[1]
} else {
N <- length(sizeG)
}
#print("set values for balanced/unbalanced")
if (is.function(updateProgress)) {
text <- paste0(0,"/",N)
updateProgress(detail = text)
}
#print("initial detail for progress bar set")
# main part
time <- 0
Power <- c()
g=1
set.seed(seed)
# group information
ncon1 = ncase1 = ncon2 = ncase2 = 0
if(unbalanced){
ncon1 = ncase1 = sizeG[g,1]
ncon2 = ncase2 = sizeG[g,2]
} else {
ncon1 = ncase1 = ncon2 = ncase2 = sizeG[g]
}
ID1 <- seq(1,(ncon1+ncase1),1)
ID2 <- seq(1,(ncon2+ncase2),1)
Type1 <- c(rep("normal",ncon1),rep("tumor",ncase1))
Type2 <- c(rep("normal",ncon2),rep("tumor",ncase2))
targetsS1 <- data.frame(ID = ID1, Type = Type1)
targetsS2 <- data.frame(ID = ID2, Type = Type2)
#print(paste(ncon1,ncon2))
#############################
# main part
#############################
# simulate data
sample1 <- sim_expr(ncon1,ncase1,ngenes, meanC1, meanDiff1, control_data_sd1, case_data_sd1)
sample2 <- sim_expr(ncon2,ncase2,ngenes, meanC2, meanDiff2, control_data_sd2, case_data_sd2)
end_time <- Sys.time()
time <- end_time - start_time
time
geneExpr1 <-  sample1
geneExpr2 <-  sample2
targets1 <- targetsS1
targets2<- targetsS2
alphaU = 0.05
start_time <- Sys.time()
gene_list1 <- diffExpr(geneExpr1,targets1)
gene_list2 <- diffExpr(geneExpr2,targets2)
#get beta values and pvalues from both studies
beta1 = gene_list1$log2FC
beta2 = gene_list2$log2FC
pval1 = gene_list1$pval
pval2 = gene_list2$pval
names(beta1) = rownames(gene_list1)
names(beta2) = rownames(gene_list2)
names(pval1) = rownames(gene_list1)
names(pval2) = rownames(gene_list2)
###########
# differential Expression
diffExpr <- function(data, targets){
# getting pval
design <- model.matrix(~targets$Type)
colnames(design) <- levels(targets$Type)
fit <- lmFit(data, design)
fit <- eBayes(fit)
# getting sd
beta <- fit$coefficients[,2]
pval <- fit$p.value[,2]
#sd <- ((sqrt(fit$s2.post)) * (fit$stdev.unscaled))[,2]
gene_list <- data.frame(log2FC = beta, pval = pval, df = fit$df.total)
return(gene_list)
}
bootstrap.pval <- function(data){
B = 1000
pE <- mean(data)
N = sum(data < pE)
M = sum(data < 0 )
alpha1 = pnorm(-2*qnorm(N/B) + qnorm(M/B))
if(pE < 0) alpha1 = 1 - alpha1
alpha = 2*alpha1
return(alpha)
}
gene_list1 <- diffExpr(geneExpr1,targets1)
gene_list2 <- diffExpr(geneExpr2,targets2)
#get beta values and pvalues from both studies
beta1 = gene_list1$log2FC
beta2 = gene_list2$log2FC
pval1 = gene_list1$pval
pval2 = gene_list2$pval
names(beta1) = rownames(gene_list1)
names(beta2) = rownames(gene_list2)
names(pval1) = rownames(gene_list1)
names(pval2) = rownames(gene_list2)
eci <- getECI(beta1,beta2,pval1,pval2)
n <- 1000
len <- dim(gene_list1)[1]
num1 <- dim(targets1)[1]
num2 <- dim(targets2)[1]
group1 = which(targets1[,2] == "tumor")
group2 = which(targets1[,2] == "normal")
group3 = which(targets2[,2] == "tumor")
group4 = which(targets2[,2] == "normal")
i=1
# if (i %% 10 == 0){
#  print(i)
# }
#Bootstrap sampling
geneExpr1new <- matrix(NA, ncol = num1, nrow = len)
geneExpr2new <- matrix(NA, ncol = num2, nrow = len)
for(j in 1:len){
new1 = c(sample(group1,length(group1),replace = TRUE),sample(group2,length(group2),replace = TRUE))
new2 = c(sample(group3,length(group3),replace = TRUE),sample(group4,length(group4),replace = TRUE))
geneExpr1new[j,] = geneExpr1[j,new1]
geneExpr2new[j,] = geneExpr2[j,new2]
}
#diff gene expression
gene_list_B1 = diffExpr(geneExpr1new,targets1)
gene_list_B2 = diffExpr(geneExpr2new,targets2)
beta_B1 = gene_list_B1$log2FC
beta_B2 = gene_list_B2$log2FC
pval_B1 = gene_list_B1$pval
pval_B2 = gene_list_B2$pval
names(beta_B1) = rownames(gene_list_B1)
names(beta_B2) = rownames(gene_list_B2)
names(pval_B1) = rownames(gene_list_B1)
names(pval_B2) = rownames(gene_list_B2)
#get eci for all genes
bootstrap[,i] <- getECI(beta_B1,beta_B2,pval_B1,pval_B2)
# bootstrap
bootstrap <- matrix(NA, ncol = n, nrow = len)
#get eci for all genes
bootstrap[,i] <- getECI(beta_B1,beta_B2,pval_B1,pval_B2)
end_time <- Sys.time()
time <- end_time - start_time
time
# ECI permutation tests
S1vsS2 <- ECIbootstrapTest(sample1,sample2,
targetsS1,targetsS2)
# geneExpr1 <-  sample1
# geneExpr2 <-  sample2
# targets1 <- targetsS1
# targets2<- targetsS2
# alphaU = 0.05
ECIbootstrapTest <- function(geneExpr1,geneExpr2,targets1,targets2){
# differential gene expression
gene_list1 <- diffExpr(geneExpr1,targets1)
gene_list2 <- diffExpr(geneExpr2,targets2)
#get beta values and pvalues from both studies
beta1 = gene_list1$log2FC
beta2 = gene_list2$log2FC
pval1 = gene_list1$pval
pval2 = gene_list2$pval
names(beta1) = rownames(gene_list1)
names(beta2) = rownames(gene_list2)
names(pval1) = rownames(gene_list1)
names(pval2) = rownames(gene_list2)
# get eci for all genes
eci <- getECI(beta1,beta2,pval1,pval2)
n <- 1000
len <- dim(gene_list1)[1]
num1 <- dim(targets1)[1]
num2 <- dim(targets2)[1]
group1 = which(targets1[,2] == "tumor")
group2 = which(targets1[,2] == "normal")
group3 = which(targets2[,2] == "tumor")
group4 = which(targets2[,2] == "normal")
#print(paste(length(group1),length(group2),length(group3),length(group4)))
# bootstrap
bootstrap <- matrix(NA, ncol = n, nrow = len)
for(i in 1:n){
if (i %% 10 == 0){
print(i)
}
#Bootstrap sampling
geneExpr1new <- matrix(NA, ncol = num1, nrow = len)
geneExpr2new <- matrix(NA, ncol = num2, nrow = len)
for(j in 1:len){
new1 = c(sample(group1,length(group1),replace = TRUE),sample(group2,length(group2),replace = TRUE))
new2 = c(sample(group3,length(group3),replace = TRUE),sample(group4,length(group4),replace = TRUE))
geneExpr1new[j,] = geneExpr1[j,new1]
geneExpr2new[j,] = geneExpr2[j,new2]
}
#diff gene expression
gene_list_B1 = diffExpr(geneExpr1new,targets1)
gene_list_B2 = diffExpr(geneExpr2new,targets2)
#ECI
beta_B1 = gene_list_B1$log2FC
beta_B2 = gene_list_B2$log2FC
pval_B1 = gene_list_B1$pval
pval_B2 = gene_list_B2$pval
names(beta_B1) = rownames(gene_list_B1)
names(beta_B2) = rownames(gene_list_B2)
names(pval_B1) = rownames(gene_list_B1)
names(pval_B2) = rownames(gene_list_B2)
#get eci for all genes
bootstrap[,i] <- getECI(beta_B1,beta_B2,pval_B1,pval_B2)
}
#confidence intervals
CI <- matrix(NA,ncol = 2, nrow = len)
pval <- c()
for(i in 1:len){
pval[i] <- bootstrap.pval(bootstrap[i,])
}
result <- data.frame(ECI = eci, p_value = pval)
rownames(result) <- rownames(gene_list1)
return(result)
}
# ECI permutation tests
S1vsS2 <- ECIbootstrapTest(sample1,sample2,
targetsS1,targetsS2)
# geneExpr1 <-  sample1
# geneExpr2 <-  sample2
# targets1 <- targetsS1
# targets2<- targetsS2
# alphaU = 0.05
ECIbootstrapTest <- function(geneExpr1,geneExpr2,targets1,targets2){
# differential gene expression
gene_list1 <- diffExpr(geneExpr1,targets1)
gene_list2 <- diffExpr(geneExpr2,targets2)
#get beta values and pvalues from both studies
beta1 = gene_list1$log2FC
beta2 = gene_list2$log2FC
pval1 = gene_list1$pval
pval2 = gene_list2$pval
names(beta1) = rownames(gene_list1)
names(beta2) = rownames(gene_list2)
names(pval1) = rownames(gene_list1)
names(pval2) = rownames(gene_list2)
# get eci for all genes
eci <- getECI(beta1,beta2,pval1,pval2)
n <- 10
len <- dim(gene_list1)[1]
num1 <- dim(targets1)[1]
num2 <- dim(targets2)[1]
group1 = which(targets1[,2] == "tumor")
group2 = which(targets1[,2] == "normal")
group3 = which(targets2[,2] == "tumor")
group4 = which(targets2[,2] == "normal")
#print(paste(length(group1),length(group2),length(group3),length(group4)))
# bootstrap
bootstrap <- matrix(NA, ncol = n, nrow = len)
for(i in 1:n){
if (i %% 10 == 0){
print(i)
}
#Bootstrap sampling
geneExpr1new <- matrix(NA, ncol = num1, nrow = len)
geneExpr2new <- matrix(NA, ncol = num2, nrow = len)
for(j in 1:len){
new1 = c(sample(group1,length(group1),replace = TRUE),sample(group2,length(group2),replace = TRUE))
new2 = c(sample(group3,length(group3),replace = TRUE),sample(group4,length(group4),replace = TRUE))
geneExpr1new[j,] = geneExpr1[j,new1]
geneExpr2new[j,] = geneExpr2[j,new2]
}
#diff gene expression
gene_list_B1 = diffExpr(geneExpr1new,targets1)
gene_list_B2 = diffExpr(geneExpr2new,targets2)
#ECI
beta_B1 = gene_list_B1$log2FC
beta_B2 = gene_list_B2$log2FC
pval_B1 = gene_list_B1$pval
pval_B2 = gene_list_B2$pval
names(beta_B1) = rownames(gene_list_B1)
names(beta_B2) = rownames(gene_list_B2)
names(pval_B1) = rownames(gene_list_B1)
names(pval_B2) = rownames(gene_list_B2)
#get eci for all genes
bootstrap[,i] <- getECI(beta_B1,beta_B2,pval_B1,pval_B2)
}
#confidence intervals
CI <- matrix(NA,ncol = 2, nrow = len)
pval <- c()
for(i in 1:len){
pval[i] <- bootstrap.pval(bootstrap[i,])
}
result <- data.frame(ECI = eci, p_value = pval)
rownames(result) <- rownames(gene_list1)
return(result)
}
start_time <- Sys.time()
# ECI permutation tests
S1vsS2 <- ECIbootstrapTest(sample1,sample2,
targetsS1,targetsS2)
end_time <- Sys.time(); end_time - start_time
#diff gene expression
gene_list_B1 = diffExpr(geneExpr1new,targets1)
gene_list_B2 = diffExpr(geneExpr2new,targets2)
for(j in 1:len){
new1 = c(sample(group1,length(group1),replace = TRUE),sample(group2,length(group2),replace = TRUE))
new2 = c(sample(group3,length(group3),replace = TRUE),sample(group4,length(group4),replace = TRUE))
geneExpr1new[j,] = geneExpr1[j,new1]
geneExpr2new[j,] = geneExpr2[j,new2]
}
#get eci for all genes
bootstrap[,i] <- getECI(beta_B1,beta_B2,pval_B1,pval_B2)
x = c(1,2,3,4,5)
new = c(3,4,5,1,2)
x[new]
x = c(0.1,0.2,0.3,0.4,0.5)
x[new]
tic
start_time <- Sys.time()
geneExpr1new <- matrix(NA, ncol = num1, nrow = len)
geneExpr2new <- matrix(NA, ncol = num2, nrow = len)
for(j in 1:len){
new1 = c(sample(group1,length(group1),replace = TRUE),sample(group2,length(group2),replace = TRUE))
new2 = c(sample(group3,length(group3),replace = TRUE),sample(group4,length(group4),replace = TRUE))
geneExpr1new[j,] = geneExpr1[j,new1]
geneExpr2new[j,] = geneExpr2[j,new2]
}
end_time <- Sys.time(); end_time - start_time
start_time <- Sys.time()
# geneExpr1new <- matrix(NA, ncol = num1, nrow = len)
# geneExpr2new <- matrix(NA, ncol = num2, nrow = len)
# for(j in 1:len){
#   new1 = c(sample(group1,length(group1),replace = TRUE),sample(group2,length(group2),replace = TRUE))
#   new2 = c(sample(group3,length(group3),replace = TRUE),sample(group4,length(group4),replace = TRUE))
#
#   geneExpr1new[j,] = geneExpr1[j,new1]
#   geneExpr2new[j,] = geneExpr2[j,new2]
# }
geneExpr1new <- apply(geneExpr1,1,bst)
geneExpr2new <- apply(geneExpr2,1,bst)
end_time <- Sys.time(); end_time - start_time
bst <- function(x){
new = c(sample(group1,length(group1),replace = TRUE),sample(group2,length(group2),replace = TRUE))
x[new]
}
start_time <- Sys.time()
# geneExpr1new <- matrix(NA, ncol = num1, nrow = len)
# geneExpr2new <- matrix(NA, ncol = num2, nrow = len)
# for(j in 1:len){
#   new1 = c(sample(group1,length(group1),replace = TRUE),sample(group2,length(group2),replace = TRUE))
#   new2 = c(sample(group3,length(group3),replace = TRUE),sample(group4,length(group4),replace = TRUE))
#
#   geneExpr1new[j,] = geneExpr1[j,new1]
#   geneExpr2new[j,] = geneExpr2[j,new2]
# }
geneExpr1new <- apply(geneExpr1,1,bst)
geneExpr2new <- apply(geneExpr2,1,bst)
end_time <- Sys.time(); end_time - start_time
shiny::runApp('R')
runApp('R')
runApp()
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp()
runApp('R')
runApp('R')
1.015493+1.014152+1.023802
(1.015493+1.014152+1.023802)/3
print(g)
shiny::runApp('R')
runApp('R')
runApp('R')
runApp('R')
shiny::runApp('R')
runApp('R')
runApp('R')
